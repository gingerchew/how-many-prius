<div class="title">
    <h1 class="mainTitle">What is that in <span class="text-gradient">Prius'</span></h1>
    <h1 aria-hidden="true" class="eggTitle" hidden>
        May your <br/><span class="text-gradient">bones</span><br/> bleach in these <br/><span class="text-gradient">sands</span>.
    </h1>
    <h1 aria-hidden="true" hidden="hidden" class="momTitle">
        Did you know <br/><span class="text-gradient">Charlotte</span><br/>has a band?<br/>Check out <br/><a href="https://momshome.bandcamp.com/" class="text-gradient">Mom's Home!</a><br/>
    </h1>
    <button type="button"><small>What is this?</small></button>
</div>
<script>
	const title = document.querySelector<HTMLHeadingElement>('.mainTitle');
	const egg = document.querySelector<HTMLHeadingElement>('.eggTitle');
    const momTitle = document.querySelector<HTMLHeadingElement>('.momTitle');
    const meta = document.querySelector<HTMLMetaElement>('[name="theme-color"]');
    class Title {
        title:HTMLHeadingElement;
        constructor(title:HTMLHeadingElement) {
            this.title = title;
        }

        reveal() {
            document.documentElement.className = '';
            document.querySelector<HTMLMetaElement>('[name="theme-color"]').setAttribute('content', getComputedStyle(document.documentElement).getPropertyValue('--_theme'));
            document.querySelectorAll('h1').forEach(h1 => h1.toggleAttribute('hidden', true));

            this.title.removeAttribute('hidden');
        }
    }

    class Pattern {
        pattern:string[];
        title:HTMLHeadingElement;
        className:string;
        position = 0;
        _q = [];
        revealed = false;
        constructor(pattern:string, title:HTMLHeadingElement, className?:string) {
            this.pattern = pattern.split('');
            this.title = title;
            this.className = className ?? pattern;
        }

        get isComplete() {
            return this._q.length === this.pattern.length;
        }

        validate(key:string) {
            const check = this.pattern[this.position] === key;
            if (check) {
                this.position++;
                this._q.push(key);
            } else {
                this.revealed = false;
                this.position = 0;
                this._q = [];
            }

            if (this.pattern.length === this._q.length) {
                this.reveal()
            }

            return check;
        }

        reveal() {
            console.log('revealing');
            this.revealed = true;
            document.documentElement.className = '';
            meta.setAttribute('content', getComputedStyle(document.documentElement).getPropertyValue('--'+this.className+'_theme'));
            console.log(meta.content);
            document.querySelectorAll('h1').forEach(h1 => h1.toggleAttribute('hidden', true));

            this.title.removeAttribute('hidden');
            document.documentElement.className = this.className;
        }
    }

    
    const heading = new Title(title)
    const bones = new Pattern('bones', egg);
    const mom = new Pattern('mom', momTitle);

	document.addEventListener('keydown', ({ key }) => {

        bones.validate(key);
        mom.validate(key);

        if (bones.isComplete || mom.isComplete) {
            bones.isComplete && bones.reveal();
            mom.isComplete && mom.reveal();
        } else {
            heading.reveal();
        }
	}, false)
</script>